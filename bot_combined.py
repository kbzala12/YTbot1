# bot.py
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import time
import threading
import requests

# --- Config ---
BOT_TOKEN = "7978191312:AAFyWVkBruuR42HTuTd_sQxFaKHBrre0VWw"
ADMIN_ID = 7459795138
GROUP_USERNAME = "boomupbot10"  # '@' ‡§ï‡•á ‡§¨‡§ø‡§®‡§æ

bot = telebot.TeleBot(BOT_TOKEN)

# --- Database Setup ---
conn = sqlite3.connect("botdata.db", check_same_thread=False)
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS users (
    telegram_id INTEGER PRIMARY KEY,
    coins INTEGER DEFAULT 0
)""")
c.execute("""CREATE TABLE IF NOT EXISTS videos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_id TEXT
)""")
conn.commit()

# --- Helper Functions ---
def is_user_in_group(user_id):
    try:
        res = requests.get(
            f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember",
            params={"chat_id": f"@{GROUP_USERNAME}", "user_id": user_id}
        ).json()
        status = res["result"]["status"]
        return status in ["member", "administrator", "creator"]
    except Exception:
        return False

def add_coins(user_id, amount):
    c.execute("INSERT OR IGNORE INTO users (telegram_id, coins) VALUES (?, 0)", (user_id,))
    c.execute("UPDATE users SET coins = coins + ? WHERE telegram_id=?", (amount, user_id))
    conn.commit()

def get_coins(user_id):
    c.execute("SELECT coins FROM users WHERE telegram_id=?", (user_id,))
    row = c.fetchone()
    return row[0] if row else 0

# --- Commands ---
@bot.message_handler(commands=['start'])
def start(message):
    uid = message.from_user.id
    if is_user_in_group(uid):
        bot.send_message(uid, "‚úÖ Welcome! ‡§Ü‡§™ group member ‡§π‡•à‡§Ç.\n/videos ‡§∏‡•á videos ‡§¶‡•á‡§ñ‡•á‡§Ç.")
    else:
        join_markup = InlineKeyboardMarkup()
        join_markup.add(InlineKeyboardButton("üöÄ Group Join ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{GROUP_USERNAME}"))
        bot.send_message(uid, "‚ùå ‡§™‡§π‡§≤‡•á group join ‡§ï‡§∞‡•á‡§Ç, ‡§´‡§ø‡§∞ /start ‡§≠‡•á‡§ú‡•á‡§Ç.", reply_markup=join_markup)

@bot.message_handler(commands=['addvideo'])
def addvideo(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî ‡§ï‡•á‡§µ‡§≤ admin ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡§æ ‡§π‡•à.")
        return
    bot.reply_to(message, "‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç.")
    bot.register_next_step_handler(message, save_video)

def save_video(message):
    if message.video:
        fid = message.video.file_id
        c.execute("INSERT INTO videos (file_id) VALUES (?)", (fid,))
        conn.commit()
        bot.reply_to(message, "‚úÖ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã saved.")
    else:
        bot.reply_to(message, "‚ùå ‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç.")

@bot.message_handler(commands=['videos'])
def list_videos(message):
    uid = message.from_user.id
    if not is_user_in_group(uid):
        join_markup = InlineKeyboardMarkup()
        join_markup.add(InlineKeyboardButton("üöÄ Group Join ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{GROUP_USERNAME}"))
        bot.send_message(uid, "‚ùå ‡§™‡§π‡§≤‡•á group join ‡§ï‡§∞‡•á‡§Ç, ‡§´‡§ø‡§∞ /videos ‡§≠‡•á‡§ú‡•á‡§Ç.", reply_markup=join_markup)
        return

    c.execute("SELECT id, file_id FROM videos")
    videos = c.fetchall()
    if not videos:
        bot.send_message(uid, "üì≠ ‡§ï‡•ã‡§à ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à.")
        return

    for vid in videos:
        vid_id, file_id = vid
        watch_btn = InlineKeyboardMarkup()
        watch_btn.add(InlineKeyboardButton("‚úÖ ‡§¶‡•á‡§ñ‡§æ", callback_data=f"watch_{vid_id}"))
        bot.send_video(uid, file_id, reply_markup=watch_btn)

@bot.callback_query_handler(func=lambda call: call.data.startswith("watch_"))
def watched(call):
    uid = call.from_user.id
    vid_id = call.data.split("_")[1]
    bot.answer_callback_query(call.id, "‚è≥ 3 ‡§Æ‡§ø‡§®‡§ü ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç coins ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è...")

    def delayed_add():
        time.sleep(180)  # 3 ‡§Æ‡§ø‡§®‡§ü
        add_coins(uid, 10)
        bot.send_message(uid, f"üéâ ‡§Ü‡§™‡§®‡•á 10 coins ‡§ï‡§Æ‡§æ ‡§≤‡§ø‡§è!\nüí∞ Total coins: {get_coins(uid)}")

    threading.Thread(target=delayed_add).start()

@bot.message_handler(commands=['coins'])
def coins(message):
    uid = message.from_user.id
    bot.send_message(uid, f"üí∞ ‡§Ü‡§™‡§ï‡•á coins: {get_coins(uid)}")

# --- Run Bot ---
bot.infinity_polling()
