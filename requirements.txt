import telebot, sqlite3
from flask import Flask
from threading import Thread

# ========== CONFIG ==========
BOT_TOKEN = "8192810260:AAFfhjDfNywZIzkrlVmtAuKFL5_E-ZnsOmU"  
ADMIN_ID = 7459795138
YOUTUBE_CHANNEL = "https://youtube.com/@kishorsinhzala.?si=L3MaMmn51a-ZyV_y"
TELEGRAM_GROUP = "FreesubscribeYouTube2k"

VIDEO_LIBRARY = [
    {"url": "https://youtu.be/G2YCGapVbEc?si=OOfd-eH3a75Dsi9S", "code": "BOOST1"},
    {"url": "https://youtube.com/shorts/KP7TXFpTCeI?si=xRVrDsy53OnCwDcN", "code": "BOOM2"},
    {"url": "https://youtube.com/shorts/dVUy6aWYgHI?si=-ffnsKllf4Kl-BMM", "code": "REACH3"},
    {"url": "https://youtu.be/SWMtSEvaiFU", "code": "ZALA4"},
    {"url": "https://youtu.be/VID5", "code": "XTRA5"},
    {"url": "https://youtu.be/VID6", "code": "BOOM6"},
    {"url": "https://youtu.be/VID7", "code": "KISHOR7"},
    {"url": "https://youtu.be/VID8", "code": "TREND8"},
    {"url": "https://youtu.be/VID9", "code": "ROCKET9"},
    {"url": "https://youtu.be/VID10", "code": "BOOMUP10"}
]

# ========== KEEP ALIVE ==========
app = Flask('')
@app.route('/')
def home(): return "Bot is running"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run).start()
keep_alive()

# ========== DATABASE ==========
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY,
    points INTEGER DEFAULT 0,
    videos INTEGER DEFAULT 0,
    shares INTEGER DEFAULT 0,
    ref INTEGER DEFAULT 0,
    referred_by TEXT
)
""")
conn.commit()

# ========== DB FUNCTIONS ==========
def check_user(user_id):
    cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (id) VALUES (?)", (user_id,))
        conn.commit()

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    return {"id": row[0], "points": row[1], "videos": row[2], "shares": row[3], "ref": row[4], "referred_by": row[5]} if row else None

def add_points(user_id, field, max_limit, increment, points):
    cursor.execute(f"SELECT {field}, points FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    if row and row[0] < max_limit:
        cursor.execute(f"UPDATE users SET {field} = {field} + ?, points = points + ? WHERE id = ?", (increment, points, user_id))
        conn.commit()
        return True
    return False

def apply_referral(new_user_id, ref_id):
    if new_user_id == ref_id: return
    user = get_user(new_user_id)
    if user["referred_by"]: return
    if get_user(ref_id):
        cursor.execute("UPDATE users SET ref = ref + 1, points = points + 50 WHERE id = ?", (ref_id,))
        cursor.execute("UPDATE users SET referred_by = ? WHERE id = ?", (ref_id, new_user_id))
        conn.commit()

# ========== TELEGRAM BOT ==========
bot = telebot.TeleBot(BOT_TOKEN)

def is_user_in_channel(user_id):
    try:
        member = bot.get_chat_member(f"@{TELEGRAM_GROUP}", user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"Error: {e}")
        return False

def main_menu():
    menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("üé• ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¶‡•á‡§ñ‡§æ", "üì§ ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§ø‡§Ø‡§æ")
    menu.row("üìä ‡§Æ‡•á‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä", "üîó ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï")
    menu.row("üéØ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§∏‡§¨‡§Æ‡§ø‡§ü")
    return menu

@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)

    if not is_user_in_channel(user_id):
        join_btn = telebot.types.InlineKeyboardMarkup()
        join_btn.add(telebot.types.InlineKeyboardButton("üì• ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç", url=f"https://t.me/{TELEGRAM_GROUP}"))
        bot.send_message(message.chat.id, "üö´ ‡§™‡§π‡§≤‡•á ‡§π‡§Æ‡§æ‡§∞‡•á Telegram Group ‡§ï‡•ã ‡§ú‡•â‡§á‡§® ‡§ï‡§∞‡•á‡§Ç:", reply_markup=join_btn)
        return

    check_user(user_id)

    if len(message.text.split()) > 1:
        ref_id = message.text.split()[1]
        apply_referral(user_id, ref_id)

    bot.send_message(message.chat.id, f"""üëã ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à {message.from_user.first_name}!

‚ú® ‡§Æ‡•à‡§Ç ‡§π‡•Ç‡§Ç *Poet Kambo* ‡§ï‡§æ ‡§ë‡§´‡§ø‡§∂‡§ø‡§Ø‡§≤ ‡§∞‡§ø‡§µ‡•â‡§∞‡•ç‡§° ‡§¨‡•â‡§ü‡•§

üî∏ ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡§Æ‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:
üé• ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¶‡•á‡§ñ ‡§ï‡§∞ ‚Äì 10 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏  
üì§ ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§∞ ‡§ï‡•á ‚Äì 25 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏  
üë• ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§∞‡•á‡§´‡§∞ ‡§ï‡§∞ ‡§ï‡•á ‚Äì 50 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏  
üéØ 1000 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§™‡§∞ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!

üì∫ *YouTube Channel* ‚Äì ‡§ú‡§∞‡•Ç‡§∞ ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§ï‡§∞‡•á‡§Ç:
üëâ {YOUTUBE_CHANNEL}

üí¨ ‡§π‡§Æ‡§æ‡§∞‡•á Telegram ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç:
üëâ https://t.me/{TELEGRAM_GROUP}

üîΩ ‡§®‡•Ä‡§ö‡•á ‡§∏‡•á ‡§ë‡§™‡•ç‡§∂‡§® ‡§ö‡•Å‡§®‡•á‡§Ç ‡§î‡§∞ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ‚¨áÔ∏è""",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: True)
def handle_all(message):
    user_id = str(message.from_user.id)
    check_user(user_id)
    text = message.text

    if text == "üé• ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¶‡•á‡§ñ‡§æ":
        video_text = "üé¨ *‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≤‡§ø‡§∏‡•ç‡§ü* - ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•ã ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§ï‡•ã‡§° ‡§∏‡•á VERIFY ‡§ï‡§∞‡•á‡§Ç:\n\n"
        for v in VIDEO_LIBRARY:
            video_text += f"üîó {v['url']}\nüÜî ‡§ï‡•ã‡§°: `{v['code']}`\n\n"
        bot.send_message(message.chat.id, video_text, parse_mode="Markdown")

        if add_points(user_id, "videos", 10, 1, 10):
            bot.reply_to(message, "‚úÖ ‡§Ü‡§™‡§®‡•á 1 ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§¶‡•á‡§ñ‡§æ, +10 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏!")
        else:
            bot.reply_to(message, "‚ùå ‡§Ü‡§™‡§®‡•á 10 ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞ ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç‡•§")

    elif text == "üì§ ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§ø‡§Ø‡§æ":
        if add_points(user_id, "shares", 5, 1, 25):
            bot.reply_to(message, "‚úÖ ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶, +25 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏!")
        else:
            bot.reply_to(message, "‚ùå ‡§Ü‡§™‡§®‡•á 5 ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡•Ä ‡§≤‡§ø‡§Æ‡§ø‡§ü ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞ ‡§≤‡•Ä ‡§π‡•à‡•§")

    elif text == "üìä ‡§Æ‡•á‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä":
        u = get_user(user_id)
        bot.reply_to(message, f"""üìä ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:
Total Points: {u['points']}
üé• Videos: {u['videos']}/10
üì§ Shares: {u['shares']}/5
üîó Referrals: {u['ref']}""")

    elif text == "üîó ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï":
        bot.reply_to(message, f"üîó ‡§Ü‡§™‡§ï‡§æ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï:\nhttps://t.me/Hkzyt_bot?start={user_id}")

    elif text == "üéØ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§∏‡§¨‡§Æ‡§ø‡§ü":
        u = get_user(user_id)
        if u['points'] >= 1000:
            bot.reply_to(message, "‚úÖ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•á‡§Ç:")
        else:
            bot.reply_to(message, "‚ùå ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è 1000 ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡§Ç‡•§")

@bot.message_handler(content_types=['text'])
def promotion_handler(message):
    user_id = str(message.from_user.id)
    u = get_user(user_id)
    if u and u['points'] >= 1000 and message.text.startswith("http"):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("‚úÖ Approve", callback_data=f"approve:{user_id}"),
            telebot.types.InlineKeyboardButton("‚ùå Reject", callback_data=f"reject:{user_id}")
        )
        bot.send_message(ADMIN_ID, f"üì£ User {user_id} sent a promo:\n{message.text}", reply_markup=markup)
        bot.reply_to(message, "üì§ ‡§Ü‡§™‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ 12 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç ‡§π‡•ã‡§ó‡§æ‡•§")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    action, user_id = call.data.split(":")
    if action == "approve":
        bot.send_message(user_id, "‚úÖ ‡§Ü‡§™‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§Ö‡§™‡•ç‡§∞‡•Ç‡§µ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à! 3 ‡§¶‡§ø‡§® ‡§§‡§ï ‡§≤‡§æ‡§á‡§µ ‡§∞‡§π‡•á‡§ó‡§æ.")
    elif action == "reject":
        bot.send_message(user_id, "‚ùå ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§® ‡§≤‡§ø‡§Ç‡§ï reject ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

print("ü§ñ Bot is running...")
bot.infinity_polling()