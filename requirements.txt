bot.send_message(message.chat.id, f"""ЁЯСЛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ {message.from_user.first_name}!

тЬи рдореИрдВ рд╣реВрдВ *Poet Kambo* рдХрд╛ рдСрдлрд┐рд╢рд┐рдпрд▓ рд░рд┐рд╡реЙрд░реНрдб рдмреЙрдЯред

ЁЯФ╕ рдпрд╣рд╛рдБ рдЖрдк рдкреЙрдЗрдВрдЯреНрд╕ рдХрдорд╛ рд╕рдХрддреЗ рд╣реИрдВ:
ЁЯОе рд╡реАрдбрд┐рдпреЛ рджреЗрдЦ рдХрд░ тАУ 10 рдкреЙрдЗрдВрдЯреНрд╕  
ЁЯУд рдмреЙрдЯ рдХреЛ рд╢реЗрдпрд░ рдХрд░ рдХреЗ тАУ 25 рдкреЙрдЗрдВрдЯреНрд╕  
ЁЯСе рджреЛрд╕реНрддреЛрдВ рдХреЛ рд░реЗрдлрд░ рдХрд░ рдХреЗ тАУ 50 рдкреЙрдЗрдВрдЯреНрд╕  
ЁЯОп 1000 рдкреЙрдЗрдВрдЯреНрд╕ рдкрд░ рдЖрдк рдЕрдкрдирд╛ рдкреНрд░рдореЛрд╢рди рд▓рд┐рдВрдХ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ!

ЁЯУ║ *YouTube Channel* тАУ рдЬрд░реВрд░ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░реЗрдВ:
ЁЯСЙ [Poet Kambo YouTube](https://youtube.com/@kishorsinhzala.?si=uKMVwnB7w5RfvSgrOH8LRkCYmY)

ЁЯТм рд╣рдорд╛рд░реЗ Telegram рдЧреНрд░реБрдк рд╕реЗ рдЬреБрдбрд╝реЗрдВ: {TELEGRAM_GROUP}

ЁЯФ╜ рдиреАрдЪреЗ рд╕реЗ рдСрдкреНрд╢рди рдЪреБрдиреЗрдВ рдФрд░ рд╢реБрд░реВ рдХрд░реЗрдВ тмЗя╕П
""", parse_mode="Markdown", reply_markup=main_menu())
import telebot, sqlite3
from flask import Flask
from threading import Thread

# ========== CONFIG ==========
BOT_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = 7459795138
YOUTUBE_CHANNEL = "https://youtube.com/@kishorsinhzala.?si=uKMVwnB7w5RfvSgrOH8LRkCYmY"
TELEGRAM_GROUP = "@boomupbot10"

# ========== KEEP ALIVE ==========
app = Flask('')
@app.route('/')
def home(): return "Bot is running"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run).start()
keep_alive()

# ========== DATABASE ==========
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY,
    points INTEGER DEFAULT 0,
    videos INTEGER DEFAULT 0,
    shares INTEGER DEFAULT 0,
    ref INTEGER DEFAULT 0,
    referred_by TEXT
)
""")
conn.commit()

# ========== DB FUNCTIONS ==========
def check_user(user_id):
    cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (id) VALUES (?)", (user_id,))
        conn.commit()

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    return {"id": row[0], "points": row[1], "videos": row[2], "shares": row[3], "ref": row[4], "referred_by": row[5]} if row else None

def add_points(user_id, field, max_limit, increment, points):
    cursor.execute(f"SELECT {field}, points FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    if row and row[0] < max_limit:
        cursor.execute(f"UPDATE users SET {field} = {field} + ?, points = points + ? WHERE id = ?", (increment, points, user_id))
        conn.commit()
        return True
    return False

def apply_referral(new_user_id, ref_id):
    if new_user_id == ref_id: return
    user = get_user(new_user_id)
    if user["referred_by"]: return
    if get_user(ref_id):
        cursor.execute("UPDATE users SET ref = ref + 1, points = points + 50 WHERE id = ?", (ref_id,))
        cursor.execute("UPDATE users SET referred_by = ? WHERE id = ?", (ref_id, new_user_id))
        conn.commit()

# ========== TELEGRAM BOT ==========
bot = telebot.TeleBot(BOT_TOKEN)

def is_user_in_channel(user_id):
    try:
        member = bot.get_chat_member(TELEGRAM_GROUP, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"Error: {e}")
        return False

def main_menu():
    menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("ЁЯОе рд╡реАрдбрд┐рдпреЛ рджреЗрдЦрд╛", "ЁЯУд рд╢реЗрдпрд░ рдХрд┐рдпрд╛")
    menu.row("ЁЯУК рдореЗрд░реА рдЬрд╛рдирдХрд╛рд░реА", "ЁЯФЧ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ")
    menu.row("ЁЯОп рдкреНрд░рдореЛрд╢рди рд╕рдмрдорд┐рдЯ")
    return menu

@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)

    if not is_user_in_channel(user_id):
        join_btn = telebot.types.InlineKeyboardMarkup()
        join_btn.add(telebot.types.InlineKeyboardButton("ЁЯУе рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░реЗрдВ", url=f"https://t.me/{TELEGRAM_GROUP.replace('@', '')}"))
        bot.send_message(message.chat.id, "ЁЯЪл рдкрд╣рд▓реЗ рд╣рдорд╛рд░реЗ Telegram Group рдХреЛ рдЬреЙрдЗрди рдХрд░реЗрдВ:", reply_markup=join_btn)
        return

    check_user(user_id)

    if len(message.text.split()) > 1:
        ref_id = message.text.split()[1]
        apply_referral(user_id, ref_id)

    bot.send_message(message.chat.id, f"""ЁЯСЛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ {message.from_user.first_name}!

тЬи рдореИрдВ рд╣реВрдВ *Poet Kambo* рдХрд╛ рдСрдлрд┐рд╢рд┐рдпрд▓ рд░рд┐рд╡реЙрд░реНрдб рдмреЙрдЯред

ЁЯФ╕ рдпрд╣рд╛рдБ рдЖрдк рдкреЙрдЗрдВрдЯреНрд╕ рдХрдорд╛ рд╕рдХрддреЗ рд╣реИрдВ:
ЁЯОе рд╡реАрдбрд┐рдпреЛ рджреЗрдЦ рдХрд░ тАУ 10 рдкреЙрдЗрдВрдЯреНрд╕  
ЁЯУд рд╢реЗрдпрд░ рдХрд░ рдХреЗ тАУ 25 рдкреЙрдЗрдВрдЯреНрд╕  
ЁЯСе рджреЛрд╕реНрддреЛрдВ рдХреЛ рд░реЗрдлрд░ рдХрд░ рдХреЗ тАУ 50 рдкреЙрдЗрдВрдЯреНрд╕  
ЁЯОп 1000 рдкреЙрдЗрдВрдЯреНрд╕ рдкрд░ рдЖрдк рдЕрдкрдирд╛ рдкреНрд░рдореЛрд╢рди рд▓рд┐рдВрдХ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ!

ЁЯУ║ *YouTube Channel* тАУ рдЬрд░реВрд░ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░реЗрдВ:
ЁЯСЙ {YOUTUBE_CHANNEL}

ЁЯТм рд╣рдорд╛рд░реЗ Telegram рдЧреНрд░реБрдк рд╕реЗ рдЬреБрдбрд╝реЗрдВ: {TELEGRAM_GROUP}

ЁЯФ╜ рдиреАрдЪреЗ рд╕реЗ рдСрдкреНрд╢рди рдЪреБрдиреЗрдВ рдФрд░ рд╢реБрд░реВ рдХрд░реЗрдВ тмЗя╕П""",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: True)
def handle_all(message):
    user_id = str(message.from_user.id)
    check_user(user_id)
    text = message.text

    if text == "ЁЯОе рд╡реАрдбрд┐рдпреЛ рджреЗрдЦрд╛":
        if add_points(user_id, "videos", 10, 1, 10):
            bot.reply_to(message, "тЬЕ рдЖрдкрдиреЗ 1 рд╡реАрдбрд┐рдпреЛ рджреЗрдЦрд╛, +10 рдкреЙрдЗрдВрдЯреНрд╕!")
        else:
            bot.reply_to(message, "тЭМ рдЖрдкрдиреЗ 10 рд╡реАрдбрд┐рдпреЛ рдкреВрд░реЗ рдХрд░ рд▓рд┐рдП рд╣реИрдВред")

    elif text == "ЁЯУд рд╢реЗрдпрд░ рдХрд┐рдпрд╛":
        if add_points(user_id, "shares", 5, 1, 25):
            bot.reply_to(message, "тЬЕ рд╢реЗрдпрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж, +25 рдкреЙрдЗрдВрдЯреНрд╕!")
        else:
            bot.reply_to(message, "тЭМ рдЖрдкрдиреЗ 5 рд╢реЗрдпрд░ рдХреА рд▓рд┐рдорд┐рдЯ рдкреВрд░реА рдХрд░ рд▓реА рд╣реИред")

    elif text == "ЁЯУК рдореЗрд░реА рдЬрд╛рдирдХрд╛рд░реА":
        u = get_user(user_id)
        bot.reply_to(message, f"""ЁЯУК рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА:
Total Points: {u['points']}
ЁЯОе Videos: {u['videos']}/10
ЁЯУд Shares: {u['shares']}/5
ЁЯФЧ Referrals: {u['ref']}""")

    elif text == "ЁЯФЧ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ":
        bot.reply_to(message, f"ЁЯФЧ рдЖрдкрдХрд╛ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ:\nhttps://t.me/Hkzyt_bot?start={user_id}")

    elif text == "ЁЯОп рдкреНрд░рдореЛрд╢рди рд╕рдмрдорд┐рдЯ":
        u = get_user(user_id)
        if u['points'] >= 1000:
            bot.reply_to(message, "тЬЕ рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рдореЛрд╢рди рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВ:")
        else:
            bot.reply_to(message, "тЭМ рдкреНрд░рдореЛрд╢рди рдХреЗ рд▓рд┐рдП 1000 рдкреЙрдЗрдВрдЯреНрд╕ рдЬрд╝рд░реВрд░реА рд╣реИрдВред")

@bot.message_handler(content_types=['text'])
def promotion_handler(message):
    user_id = str(message.from_user.id)
    u = get_user(user_id)
    if u and u['points'] >= 1000 and message.text.startswith("http"):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve:{user_id}"),
            telebot.types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject:{user_id}")
        )
        bot.send_message(ADMIN_ID, f"ЁЯУг User {user_id} sent a promo:\n{message.text}", reply_markup=markup)
        bot.reply_to(message, "ЁЯУд рдЖрдкрдХрд╛ рд▓рд┐рдВрдХ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред 12 рдШрдВрдЯреЗ рдореЗрдВ рд░рд┐рд╡реНрдпреВ рд╣реЛрдЧрд╛ред")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    action, user_id = call.data.split(":")
    if action == "approve":
        bot.send_message(user_id, "тЬЕ рдЖрдкрдХрд╛ рд▓рд┐рдВрдХ рдЕрдкреНрд░реВрд╡ рд╣реЛ рдЧрдпрд╛ рд╣реИ! 3 рджрд┐рди рддрдХ рд▓рд╛рдЗрд╡ рд░рд╣реЗрдЧрд╛.")
    elif action == "reject":
        bot.send_message(user_id, "тЭМ рдЖрдкрдХрд╛ рдкреНрд░рдореЛрд╢рди рд▓рд┐рдВрдХ reject рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

print("ЁЯдЦ Bot is running...")
bot.infinity_polling()
import telebot, sqlite3, os
from flask import Flask
from threading import Thread

BOT_TOKEN = "YOUR_BOT_TOKEN"
TELEGRAM_GROUP = "@yourgroup"
ADMIN_ID = 123456789

VIDEO_LIBRARY = [
    {"url": "https://youtu.be/abc1", "code": "BOOST1"},
    {"url": "https://youtu.be/abc2", "code": "BOOM2"},
    {"url": "https://youtu.be/abc3", "code": "REACH3"}
]

# Flask for Replit Keep Alive
app = Flask('')
@app.route('/')
def home(): return "Bot is running"
def run(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run).start()
keep_alive()

# Database Setup
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY,
    points INTEGER DEFAULT 0,
    videos INTEGER DEFAULT 0,
    claimed_codes TEXT
)
""")
conn.commit()

def check_user(user_id):
    cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (id, claimed_codes) VALUES (?, ?)", (user_id, ""))
        conn.commit()

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    return {"id": row[0], "points": row[1], "videos": row[2], "claimed_codes": row[3]} if row else None

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=["start"])
def start(msg):
    user_id = str(msg.from_user.id)
    check_user(user_id)
    bot.send_message(msg.chat.id, "ЁЯОЙ Welcome! рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЗрдВ рдФрд░ рдХреЛрдб рдбрд╛рд▓реЗрдВ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдПред", reply_markup=main_menu())

def main_menu():
    menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("ЁЯОе рд╡реАрдбрд┐рдпреЛ рджреЗрдЦрд╛", "ЁЯУК рдореЗрд░реА рдЬрд╛рдирдХрд╛рд░реА")
    return menu

@bot.message_handler(func=lambda msg: msg.text == "ЁЯУК рдореЗрд░реА рдЬрд╛рдирдХрд╛рд░реА")
def user_info(msg):
    user_id = str(msg.from_user.id)
    check_user(user_id)
    u = get_user(user_id)

    watched = u['videos']
    total = len(VIDEO_LIBRARY)
    progress = ""
    for i in range(total):
        if VIDEO_LIBRARY[i]["code"] in u['claimed_codes'].split(","):
            progress += f"тЬЕ {i+1} "
        else:
            progress += f"тЭМ {i+1} "

    bot.reply_to(msg, f"""ЁЯУК рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА:
ЁЯФв Total Points: {u['points']}
ЁЯОм Videos Seen: {watched}/{total}
ЁЯОп Progress: {progress}""")

@bot.message_handler(func=lambda msg: msg.text == "ЁЯОе рд╡реАрдбрд┐рдпреЛ рджреЗрдЦрд╛")
def send_all_videos(msg):
    text = "ЁЯУ║ рд╕рднреА рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЗрдВ рдФрд░ рдХреЛрдб рдЯрд╛рдЗрдк рдХрд░реЗрдВ:\n\n"
    for i, video in enumerate(VIDEO_LIBRARY):
        text += f"ЁЯОм Video {i + 1}: {video['url']}\nЁЯУМ Code: (рд╡реАрдбрд┐рдпреЛ рдореЗрдВ рдорд┐рд▓реЗрдЧрд╛)\n\n"
    bot.send_message(msg.chat.id, text)

@bot.message_handler(func=lambda msg: msg.text and not msg.text.startswith("/"))
def code_check(msg):
    user_id = str(msg.from_user.id)
    code = msg.text.strip().upper()
    check_user(user_id)
    user = get_user(user_id)
    claimed = user["claimed_codes"].split(",") if user["claimed_codes"] else []

    for index, video in enumerate(VIDEO_LIBRARY):
        if code == video["code"]:
            if code in claimed:
                bot.reply_to(msg, "тЪая╕П рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╣реА рдЗрд╕ рдХреЛрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рд╣реИред")
                return

            claimed.append(code)
            new_claimed = ",".join(claimed)
            cursor.execute("UPDATE users SET claimed_codes = ?, videos = videos + 1, points = points + 10 WHERE id = ?",
                           (new_claimed, user_id))
            conn.commit()

            bot.reply_to(msg, f"тЬЕ рд╕рд╣реА рдХреЛрдб! рд╡реАрдбрд┐рдпреЛ #{index + 1} рдХреЗ рд▓рд┐рдП +10 рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓ рдЧрдПред")
            return

    bot.reply_to(msg, "тЭМ рдЧрд▓рдд рдХреЛрдб! рдХреГрдкрдпрд╛ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦрдХрд░ рд╕рд╣реА рдХреЛрдб рдЯрд╛рдЗрдк рдХрд░реЗрдВред")

print("ЁЯдЦ Bot is running...")
bot.infinity_polling()
